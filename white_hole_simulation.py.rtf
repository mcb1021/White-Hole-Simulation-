{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1 import numpy as np\
2 from scipy.integrate import solve_ivp\
3 import sympy as sp\
4\
5 def lqg_dynamics(t, y, rho_c, rho_0):\
6 a, da_dt = y\
7 if a <= 0: # Prevent negative scale factor\
8 return [0, 0]\
9 rho = rho_0 / a**3\
10 d2a_dt2 = - (4 * np.pi / 3) * rho * (1 - 2 * rho / rho_c) *\
\
a\
\
11 return [da_dt, d2a_dt2]\
12\
13 rho_0 = 1.0\
14 rho_c = 100.0\
15 a0 = 1.0\
16 initial_rho = rho_0 / a0**3\
17 H0 = np.sqrt((8 * np.pi / 3) * initial_rho * (1 - initial_rho /\
rho_c))\
18 da0 = -a0 * H0\
19 t_span = [0, 4]\
20 def bounce_event(t, y, rho_c, rho_0):\
21 return y[1]\
22 bounce_event.terminal = False\
23 bounce_event.direction = 1\
24 sol = solve_ivp(lqg_dynamics, t_span, [a0, da0], args=(rho_c,\
rho_0), method=\'92RK45\'92, rtol=1e-10, atol=1e-10, events=\
bounce_event)\
25\
26 min_idx = np.argmin(sol.y[0])\
27 a_min = sol.y[0][min_idx]\
28 t_bounce = sol.t[min_idx]\
29 a_min_sym = (rho_0 / rho_c)**sp.Rational(1,3)\
30\
31 print(f"Minimum scale factor (numerical): \{a_min:.10f\}")\
32 print(f"Theoretical bounce point: \{float(a_min_sym):.10f\}")\
33 print(f"Bounce time: \{t_bounce:.6f\}")\
34 print(f"Final scale factor at t=4: \{sol.y[0][-1]:.4f\}")}